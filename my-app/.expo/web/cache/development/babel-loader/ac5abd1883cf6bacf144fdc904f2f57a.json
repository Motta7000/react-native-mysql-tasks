{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\UADE\\\\2021\\\\fatz\\\\react-native-mysql-tasks\\\\my-app\\\\screens\\\\TaskFormScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { saveTask, getTask } from \"../api\";\nimport Layout from \"../components/Layout\";\n\nvar TaskFormScreen = function TaskFormScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState({\n    title: '',\n    description: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      task = _useState2[0],\n      setTask = _useState2[1];\n\n  var handleChange = function handleChange(name, value) {\n    setTask(_objectSpread(_objectSpread({}, task), {}, _defineProperty({}, name, value)));\n  };\n\n  var handleSubmit = function handleSubmit() {\n    console.log(task);\n    saveTask(task);\n    navigation.navigate('HomeScreen');\n  };\n\n  useEffect(function () {\n    if (route.params && route.params.id) {\n      navigation.setOptions({\n        headerTitle: 'Updating a Task'\n      })(function _callee() {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(getTask(route.params.id));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    }\n\n    return function () {};\n  }, []);\n  return React.createElement(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Write a Title\",\n    placeholderTextColor: \"white\",\n    onChangeText: function onChangeText(text) {\n      return handleChange('title', text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Write a Description\",\n    placeholderTextColor: \"white\",\n    onChangeText: function onChangeText(text) {\n      return handleChange('description', text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.buttonSave,\n    onPress: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"Save Task\")));\n};\n\nvar styles = StyleSheet.create({\n  input: {\n    width: '90%',\n    marginBottom: 7,\n    fontSize: 14,\n    borderWidth: 1,\n    borderColor: '#10ac84',\n    height: 30,\n    color: 'white',\n    textAlign: 'center',\n    padding: 6,\n    borderRadius: 5\n  },\n  buttonSave: {\n    paddingTop: 10,\n    paddingBottom: 10,\n    borderRadius: 5,\n    marginBottom: 3,\n    backgroundColor: '#10ac84',\n    width: '90%'\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white'\n  }\n});\nexport default TaskFormScreen;","map":{"version":3,"sources":["D:/UADE/2021/fatz/react-native-mysql-tasks/my-app/screens/TaskFormScreen.js"],"names":["React","useState","useEffect","saveTask","getTask","Layout","TaskFormScreen","navigation","route","title","description","task","setTask","handleChange","name","value","handleSubmit","console","log","navigate","params","id","setOptions","headerTitle","styles","input","text","buttonSave","buttonText","StyleSheet","create","width","marginBottom","fontSize","borderWidth","borderColor","height","color","textAlign","padding","borderRadius","paddingTop","paddingBottom","backgroundColor"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport { View, Text,TextInput,StyleSheet,TouchableOpacity } from 'react-native'\r\nimport { saveTask,getTask } from '../api'\r\nimport Layout from '../components/Layout'\r\n\r\nconst TaskFormScreen = ({navigation,route}) => {\r\n\r\n    const [task,setTask] = useState({\r\n        title:'',\r\n        description:''\r\n    })\r\n\r\nconst handleChange = (name,value) =>{\r\n    setTask({...task,[name]:value})\r\n}\r\nconst handleSubmit = () => {\r\n    console.log(task)\r\n   \r\n    saveTask(task)\r\n    navigation.navigate('HomeScreen')\r\n\r\n}\r\n\r\n\r\n\r\n useEffect(() => {\r\n    if (route.params && route.params.id)\r\n    {\r\n        navigation.setOptions({headerTitle:'Updating a Task'})\r\n       \r\n        (async () => {\r\n            await getTask(route.params.id);\r\n        })\r\n    }\r\n    return () => {\r\n        \r\n    }\r\n}, [])\r\n\r\n    return (\r\n        <Layout>\r\n            <TextInput style = {styles.input}\r\n                placeholder=\"Write a Title\"\r\n                placeholderTextColor ='white'\r\n                onChangeText={text=>handleChange('title',text)}\r\n            />\r\n            <TextInput style = {styles.input}\r\n                placeholder=\"Write a Description\"\r\n                placeholderTextColor ='white'\r\n                onChangeText={text=>handleChange('description',text)}\r\n            />\r\n            <TouchableOpacity style={styles.buttonSave} onPress={handleSubmit}>\r\n                <Text style={styles.buttonText}>Save Task</Text>\r\n            </TouchableOpacity>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    input:{\r\n        width:'90%',\r\n        marginBottom:7,\r\n        fontSize:14,\r\n        borderWidth:1,\r\n        borderColor:'#10ac84',\r\n        height:30,\r\n        color:'white',\r\n        textAlign:'center',\r\n        padding:6,\r\n        borderRadius:5\r\n    },\r\n    buttonSave:{\r\n        paddingTop:10,\r\n        paddingBottom:10,\r\n        borderRadius:5,\r\n        marginBottom:3,\r\n        backgroundColor:'#10ac84',\r\n        width:'90%'\r\n    },\r\n    buttonText:{\r\n        textAlign:'center',\r\n        color:'white'\r\n    }\r\n   \r\n})\r\n\r\nexport default TaskFormScreen\r\n"]},"metadata":{},"sourceType":"module"}